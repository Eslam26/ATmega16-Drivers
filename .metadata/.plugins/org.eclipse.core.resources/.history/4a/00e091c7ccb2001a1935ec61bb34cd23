/*******************************************************************************************************
 *  [MODULE]      :      <USART>                                                                       *
 *  [FILE NAME]   :      <USART.c>                                                                     *
 *  [AUTHOR]      :      <Eslam EL-Naggar>                                                             *
 *  [DATE CREATED]:      <Dec 5, 2019>                                                                 *
 *  [Description} :      <Source file for the ATmega16 USART driver>                                   *
 ******************************************************************************************************/

#include "USART.h"

//////////////////////////////////#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE_VALUE_CONFIG * 8UL))) - 1)

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void UART_init(const USART_configType* USART_configStructurePtr)
{

	uint8 UBRR_registerValue = 0;
	UCSRA = (UCSRA & 0b11111101) | (( USART_configStructurePtr->doubleTransmissionModeConfig & 0b00000001)<<(U2X));
	UCSRA = (UCSRA & 0b11111110) | (( USART_configStructurePtr->multiProcessorCommunicationModeConfig & 0b00000001)<<(MPCM));
	/************************** UCSRB Description **************************
	 * RXCIE = 0 Disable USART RX Complete Interrupt Enable
	 * TXCIE = 0 Disable USART Tx Complete Interrupt Enable
	 * UDRIE = 0 Disable USART Data Register Empty Interrupt Enable
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (UCSRB & 0b01111111) | (( USART_configStructurePtr->rxCompleteInterruptModeConfig & 0b00000001)<<(RXCIE));
	UCSRB = (UCSRB & 0b10111111) | (( USART_configStructurePtr->txCompleteInterruptModeConfig & 0b00000001)<<(TXCIE));
	UCSRB = (UCSRB & 0b11011111) | (( USART_configStructurePtr->dataRegisterEmptyInterruptModeConfig & 0b00000001)<<(UDRIE));
	UCSRB = (UCSRB & 0b11111011) | ((( USART_configStructurePtr->characterSizeConfig & 0b00000100)>>2)<<(UCSZ2));
	UCSRB = (UCSRB & 0b11101111) | ((1)<<(RXEN));
	UCSRB = (UCSRB & 0b11110111) | ((1)<<(TXEN));
	
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (UCSRC & 0b01111111) | ((1)<<(URSEL));
	UCSRC = (UCSRC & 0b10111111) | (( USART_configStructurePtr->modeSelectConfig & 0b00000001)<<(UMSEL));
	UCSRC = (UCSRC & 0b11001111) | (( USART_configStructurePtr->parityBitModeConfig & 0b00000011)<<(UPM0));
	UCSRC = (UCSRC & 0b11110111) | (( USART_configStructurePtr->stopBitModeConfig & 0b00000001)<<(USBS));
	UCSRC = (UCSRC & 0b11111001) | (( USART_configStructurePtr->characterSizeConfig & 0b00000011)<<(UCSZ0));
	UCSRC = (UCSRC & 0b11111110) | (( USART_configStructurePtr->clockPolarityConfig & 0b00000001)<<(UCPOL));
	
	if(USART_configStructurePtr->modeSelectConfig == SYNCHRONOUS_OPERATION_MODE){
		UBRR_registerValue = (((F_CPU / ( USART_configStructurePtr->baudrateValue* 2UL))) - 1);
	}
	else if(USART_configStructurePtr->modeSelectConfig == ASYNCHRONOUS_OPERATION_MODE){
		if(USART_configStructurePtr->doubleTransmissionModeConfig == USART_DOUBLE_TRANSMISSION_MODE_ENABLE_OFF)
		{
			UBRR_registerValue = (((F_CPU / ( USART_configStructurePtr->baudrateValue* 16UL))) - 1);
		}
		else if(USART_configStructurePtr->doubleTransmissionModeConfig == USART_DOUBLE_TRANSMISSION_MODE_ENABLE_ON){
			UBRR_registerValue = (((F_CPU / ( USART_configStructurePtr->baudrateValue* 8UL))) - 1);
		}
		else
		{

		}
	}
	else
	{

	}



		(((F_CPU / (USART_BAUDRATE_VALUE_CONFIG * 8UL))) - 1)
	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = UBRR_registerValue>>8;
	UBRRL = UBRR_registerValue;
}
	
void UART_sendByte(const uint8 data)
{
	/* UDRE flag is set when the Tx buffer (UDR) is empty and ready for 
	 * transmitting a new byte so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
	/* Put the required data in the UDR register and it also clear the UDRE flag as 
	 * the UDR register is not empty now */	 
	UDR = data;
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transimission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/	
}

uint8 UART_recieveByte(void)
{
	/* RXC flag is set when the UART receive data so wait until this 
	 * flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
	/* Read the received data from the Rx buffer (UDR) and the RXC flag 
	   will be cleared after read this data */	 
    return UDR;		
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
		i++;
	}
	/************************* Another Method *************************
	while(*Str != '\0')
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
}
