/*******************************************************************************************************
 *  [MODULE]      :      <GPT>                                                                         *
 *  [FILE NAME]   :      <GPT_ModuleTest.c>                                                            *
 *  [AUTHOR]      :      <Eslam EL-Naggar>                                                             *
 *  [DATE CREATED]:      <Dec 6, 2019>                                                                 *
 *  [Description} :      <source file for ATmega16 GPT Driver Module Test>                             *
 ******************************************************************************************************/


#include "GPT.h"

uint8 g_tick = 0;

void Timer_0_TestFunction(void)
{
	g_tick++;

	PORTC ^= (1<<PC0); /* Toggle PC0 Pin to generate a 10Khz Clock */


}

void Timer_1_TestFunction(void){

	if(g_tick == 2)
	{
		PORTC ^= (1<<PC1); /* Toggle PC1 Pin to generate a 5Khz Clock */
	}
}

void Timer_2_TestFunction(void){
	if(g_tick == 4)
	{
		PORTC ^= (1<<PC1); /* Toggle PC1 Pin to generate a 5Khz Clock */
		PORTC ^= (1<<PC2); /* Toggle PC2 Pin to generate a 2.5Khz Clock */
		g_tick = 0;
	}
}

void Timer0_CTC_Square_Wave_Init(void)
{
	TCNT0 = 0; // initial value 0
	OCR0 = 50; // compare value

	TIMSK |= (1<<OCIE0); //enable compare interrupt

	/* Configure timer control register
	 * 1. Non PWM mode FOC0=1
	 * 2. CTC Mode WGM01=1 & WGM00=0
	 * 3. No need for OC0 in this example so COM00=0 & COM01=0
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<FOC0) | (1<<WGM01) | (1<<CS01);
}

int main(void)
{
	DDRC |= 0x07; /* Configure PC0, PC1 and PC2 as output pins */
	PORTC &= 0xF8; /* Clear PC0, PC1 and PC2 pins */

	SREG |= (1<<7); /* enable global interrupts in MC */

	GPT_init(&GPT_configStructure);
	GPT_2_setCallBack(anahamada);
	GPT_enable(2);


    while(1)
    {

    }
}
