/*******************************************************************************************************
 *  [MODULE]      :      <ADC>                                                                         *
 *  [FILE NAME]   :      <ADC.h>                                                                       *
 *  [AUTHOR]      :      <Eslam EL-Naggar>                                                             *
 *  [DATE CREATED]:      <Dec 5, 2019>                                                                 *
 *  [Description} :      <Header file for the ATmega16 ADC driver>                                     *
 ******************************************************************************************************/

#ifndef ADC_H_
#define ADC_H_

/*---------------------------------INCLUDES------------------------------------*/

#include "micro_config.h"
#include "std_types.h"
#include "common_macros.h"
#include "ADC_Cfg.h"

/*---------------------------------DEFINES-------------------------------------*/

#define ONE 1
#define ZERO 0

#define I_BIT 7

#define DEFAULT_AREF_PIN_MODE AREF_ON_INTERNAL_VREF_OFF
#define DEFAULT_LEFT_ADJUST_RESULT_MODE LEFT_ADJUST_RESULT_MODE_OFF
#define DEFAULT_INPUT_CHANNEL_GAIN_SELECTION_MODE SINGLE_ENDED_INPUT_ADC0
#define DEFAULT_ADC_AUTO_TRIGGER_MODE ADC_AUTO_TRIGGER_OFF
#define DEFAULT_ADC_INTERRUPT_ENABLE_MODE ADC_INTERRUPT_ENABLE_OFF
#define DEFAULT_DIVISION_FACTOR DIVISION_FACTOR_8
#define DEFAULT_ADC_AUTO_TRIGGER_SOURCE_MODE FREE_RUNNING_MODE

/*----------------------------------ENUMS--------------------------------------*/
typedef enum {
	AREF_ON_INTERNAL_VREF_OFF,
	AVCC_WITH_EXTERNAL_CAPACITOR_AT_AREF_PIN,
	INTERNAL_VOLTAGE_WITH_EXTERNAL_CAPACITOR_AT_AREF_PIN = 3
} ADC_Reference_Selection;

typedef enum {
	LEFT_ADJUST_RESULT_MODE_OFF, LEFT_ADJUST_RESULT_MODE_ON
} ADC_LEFT_ADJUST_RESULT_MODE;

typedef enum {
	SINGLE_ENDED_INPUT_ADC0,
	SINGLE_ENDED_INPUT_ADC1,
	SINGLE_ENDED_INPUT_ADC2,
	SINGLE_ENDED_INPUT_ADC3,
	SINGLE_ENDED_INPUT_ADC4,
	SINGLE_ENDED_INPUT_ADC5,
	SINGLE_ENDED_INPUT_ADC6,
	SINGLE_ENDED_INPUT_ADC7,
	ADC0_NEGATIVE_DIFFERENTIAL_ADC0_POSTIVE_DIFFERENTIAL_INPUT_GAIN_10,
	ADC0_NEGATIVE_DIFFERENTIAL_ADC1_POSTIVE_DIFFERENTIAL_INPUT_GAIN_10,
	ADC0_NEGATIVE_DIFFERENTIAL_ADC0_POSTIVE_DIFFERENTIAL_INPUT_GAIN_200,
	ADC0_NEGATIVE_DIFFERENTIAL_ADC1_POSTIVE_DIFFERENTIAL_INPUT_GAIN_200,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC2_POSTIVE_DIFFERENTIAL_INPUT_GAIN_10,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC3_POSTIVE_DIFFERENTIAL_INPUT_GAIN_10,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC2_POSTIVE_DIFFERENTIAL_INPUT_GAIN_200,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC3_POSTIVE_DIFFERENTIAL_INPUT_GAIN_200,
	ADC1_NEGATIVE_DIFFERENTIAL_ADC0_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC1_NEGATIVE_DIFFERENTIAL_ADC1_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC1_NEGATIVE_DIFFERENTIAL_ADC2_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC1_NEGATIVE_DIFFERENTIAL_ADC3_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC1_NEGATIVE_DIFFERENTIAL_ADC4_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC1_NEGATIVE_DIFFERENTIAL_ADC5_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC1_NEGATIVE_DIFFERENTIAL_ADC6_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC1_NEGATIVE_DIFFERENTIAL_ADC7_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC0_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC1_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC2_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC3_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC4_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	ADC2_NEGATIVE_DIFFERENTIAL_ADC5_POSTIVE_DIFFERENTIAL_INPUT_GAIN_1,
	SINGLE_ENDED_INPUT_1_22_Volts,
	SINGLE_ENDED_INPUT_ZERO_Volts
} ADC_Input_Channel_and_Gain_Selections;

typedef enum {
	ADC_AUTO_TRIGGER_OFF, ADC_AUTO_TRIGGER_ON
} ADC_AUTO_TRIGGER_MODE;

typedef enum {
	ADC_INTERRUPT_ENABLE_OFF, ADC_INTERRUPT_ENABLE_ON
} ADC_INTERRUPT_ENABLE_MODE;

typedef enum {
	DIVISION_FACTOR_2,
	DIVISION_FACTOR_4=2,
	DIVISION_FACTOR_8,
	DIVISION_FACTOR_16,
	DIVISION_FACTOR_32,
	DIVISION_FACTOR_64,
	DIVISION_FACTOR_128
} ADC_PRESCALER;

typedef enum {
	FREE_RUNNING_MODE,
	ANALOG_COMPARTOR,
	EXTERNAL_INTERRUPT_REQUEST_ZERO,
	TIMER_COUNTER_0_COMPARE_MATCH,
	TIMER_COUNTER_0_OVF,
	TIMER_COUNTER_1_COMPARE_MATCH_B,
	TIMER_COUNTER_1_OVF,
	TIMER_COUNTER_1_CAPTURE_EVENT
}ADC_AUTO_TRIGGER_SOURCE;


/*--------------------------------STRUCTURES-----------------------------------*/
typedef struct
{
	ADC_Reference_Selection referenceSelectionConfig;
	ADC_LEFT_ADJUST_RESULT_MODE leftAdjustResultModeConfig;
	ADC_Input_Channel_and_Gain_Selections inputChannelGainSelectionsConfig;
	ADC_AUTO_TRIGGER_MODE autoTriggerModeConfig;
	ADC_INTERRUPT_ENABLE_MODE interruptEnableModeConfig;
	ADC_PRESCALER prescalerConfig;
	ADC_AUTO_TRIGGER_SOURCE autoTriggerSourceConfig;

}ADC_configType;


/*---------------------------Functions Prototypes------------------------------*/
void ADC_init(const ADC_configType* ADC_configStructurePtr);
uint16 ADC_readChannel(uint8 channel_num);
void ADC_setCallBack(void (*ADC_setCallBack_Ptr)(void));

/*--------------------------------EXTERNS--------------------------------------*/

extern ADC_configType ADC_configStructure;

#endif /* ADC_H_ */
